#pragma kernel TraverseQuadTree
#pragma kernel BuildLodMap
#pragma kernel BuildPatches

#pragma multi_compile_local _ _REVERSE_Z
#pragma multi_compile_local _ _ENABLE_FRUS_CULL
#pragma multi_compile_local _ _ENABLE_HIZ_CULL
#pragma multi_compile_local _ _BOUNDS_DEBUG
#pragma multi_compile_local _ _ENABLE_SEAM

#include "CommonInput.hlsl"

Texture2D<float4> _MinMaxHeightTexture;
Texture2D<float4> _HeightMap;
RWTexture2D<float4> _LodMap;

//consume类型结构相当于栈，所以取到的第一个末位置。
ConsumeStructuredBuffer<uint2> _ConsumeNodeList;
AppendStructuredBuffer<uint2> _AppendNodeList;
AppendStructuredBuffer<uint3> _AppendFinalNodeList;
//四叉树遍历完毕之后,合适的节点放这里
StructuredBuffer<uint3> _FinalNodeList;

//保存了Node的一些信息 通过NodeI来访问
RWStructuredBuffer<NodeDescriptor> _NodeDescriptors;

//表示TraverseQuadTree kernel执行的LOD级别
uniform uint _PassLOD;
uniform float3 _CameraPositionWS;

//包围盒在高度方向留出冗余空间，应对MinMaxHeightTexture的精度不足
uniform int _BoundsHeightRedundance;

uniform float4 _NodeEvaluationC; //节点评价系数。x为距离系数

//*******世界尺寸参数********//
//世界大小
uniform float3 _WorldSize;


//
/**
记录了每个Lod级别的(nodeSize,patchExtent,nodeCount,sectorCountPerNode)

其中:
- nodeSize为Node的边长(米)
- patchExtent等于nodeSize/16
- nodeCount等于WorldSize/nodeSize
- sectorCountPerNode等于2^lod
**/
uniform float4 _WorldLodParams[6];

uniform uint _NodeIDOffsetOfLOD[6];

//*****裁剪相关变量*******/
uniform float4 _CameraFrustumPlanes[6];
// ConsumeStructuredBuffer<RenderPatch> _PatchConsumeList;
AppendStructuredBuffer<RenderPatch> _CulledPatchList;
#if BOUNDS_DEBUG
AppendStructuredBuffer<BoundsDebug> _PatchBoundsList;
#endif

uniform float _HizDepthBias;

//****以下这些参数全由HizMapPass全局设置得到***//
Texture2D<float4> _HizMap;
uniform float4 _HizMapSize;
uniform float4x4 _HizCameraMatrixVP;
uniform float3 _HizCameraPositionWS;

float GetNodeSize(uint lod)
{
    return _WorldLodParams[lod].x;
}

float GetNodeCount(uint lod)
{
    return _WorldLodParams[lod].z;
}

float GetPatchExtent(uint lod)
{
    return _WorldLodParams[lod].y;
}

uint GetSectorCountPerNode(uint lod)
{
    return (uint)_WorldLodParams[lod].w;
}

//计算在大长串Buffer中的位置
uint GetNodeID(uint3 nodeLoc)
{
    return _NodeIDOffsetOfLOD[nodeLoc.z] + nodeLoc.y * GetNodeCount(nodeLoc.z) + nodeLoc.x;
}

uint GetNodeID(uint2 nodeLoc, uint mip)
{
    return GetNodeID(uint3(nodeLoc, mip));
}

float2 GetNodePositionWS2(uint2 nodeLoc, uint mip)
{
    float nodeMeterSize = GetNodeSize(mip);
    float nodeCount = GetNodeCount(mip);
    //居中是零点  所以向左下偏移
    float2 nodePositionWS = ((float2)nodeLoc - (nodeCount - 1) * 0.5) * nodeMeterSize;
    return nodePositionWS;
}

float3 GetNodePositionWS(uint2 nodeLoc, uint lod)
{
    float2 nodePositionWS = GetNodePositionWS2(nodeLoc, lod);
    float2 minMaxHeight = _MinMaxHeightTexture.mips[lod + 3][nodeLoc].xy;
    float y = (minMaxHeight.x + minMaxHeight.y) * 0.5 * _WorldSize.y;
    return float3(nodePositionWS.x, y, nodePositionWS.y);
}


bool EvaluateNode(uint2 nodeLoc, uint lod)
{
    float3 positionWS = GetNodePositionWS(nodeLoc, lod);
    float dis = distance(_CameraPositionWS, positionWS);
    float nodeSize = GetNodeSize(lod);
    //距离小于(格子尺寸*系数) 则要细分
    float f = dis / (nodeSize * _NodeEvaluationC.x);
    if (f < 1)
    {
        return true;
    }
    return false;
}

//细分部分---------------

//遍历四叉树,进行节点评估,生成AppendFinalNodeList 和 NodeDescriptors
[numthreads(1,1,1)]
void TraverseQuadTree(uint3 id : SV_DispatchThreadID)
{
    uint2 nodeLoc = _ConsumeNodeList.Consume();
    int branch;
    if (_PassLOD > 0 && EvaluateNode(nodeLoc, _PassLOD))
    {
        _AppendNodeList.Append(nodeLoc * 2);
        _AppendNodeList.Append(nodeLoc * 2 + uint2(1, 0));
        _AppendNodeList.Append(nodeLoc * 2 + uint2(0, 1));
        _AppendNodeList.Append(nodeLoc * 2 + uint2(1, 1));
        branch = 1;
    }
    else
    {
        _AppendFinalNodeList.Append(uint3(nodeLoc, _PassLOD));
        branch = 0;
    }
    uint nodeID = GetNodeID(nodeLoc, _PassLOD);
    _NodeDescriptors[nodeID].branch = branch;
}


//LOD Map部分-------------

//确认lod map图
//把地图一共分为 8*N(20)块
//如果大格子 比如每32个为一组 没有子节点展开 则这个大格子lodmap 为 max_lod
//如果有展开 则16个一组  找出没有展开的  为max_lod-1  否则继续循环
[numthreads(8,8,1)]
void BuildLodMap(uint3 id : SV_DispatchThreadID)
{
    uint2 sectorLoc = id.xy;

    [unroll]
    for (uint lod = MAX_TERRAIN_LOD; lod >= 0; lod --)
    {
        uint sectorCount = GetSectorCountPerNode(lod);
        uint2 nodeLoc = sectorLoc / sectorCount;
        uint nodeID = GetNodeID(nodeLoc, lod);
        if (_NodeDescriptors[nodeID].branch == 0)
        {
            _LodMap[sectorLoc] = lod * 1.0 / MAX_TERRAIN_LOD;
            return;
        }
    }
    _LodMap[sectorLoc] = 0;
}


//裁剪部分--------------------

RenderPatch CreatePatch(uint3 nodeLoc, uint2 pathchOffset)
{
    uint lod = nodeLoc.z;
    float nodeMeterSize = GetNodeSize(lod);
    //把每个patch分为8个小块(node)
    float patchMeterSize = nodeMeterSize / PATCH_COUNT_PER_NODE;
    float2 nodePositionWS = GetNodePositionWS2(nodeLoc.xy, lod);

    //node 细分位置
    uint2 pathchLoc = nodeLoc.xy * PATCH_COUNT_PER_NODE + pathchOffset;
    //经过测试,当min max 相差较小的时候,RG32似乎还是存在精度问题
    float2 minMaxHeight = _MinMaxHeightTexture.mips[lod][pathchLoc].rg * _WorldSize.y + float2(
        -_BoundsHeightRedundance, _BoundsHeightRedundance);
    RenderPatch patch;
    patch.lod = lod;
    patch.position = nodePositionWS + (pathchOffset - (PATCH_COUNT_PER_NODE - 1) * 0.5) * patchMeterSize;
    patch.minMaxHeight = minMaxHeight;
    patch.lodTrans = 0;
    return patch;
}

Bounds GetPatchBounds(RenderPatch patch)
{
    float halfSize = GetPatchExtent(patch.lod);
    #if _ENABLE_SEAM
        halfSize *= 0.9;
    #endif
    Bounds bounds;
    float3 boundsMin, boundsMax;
    boundsMin.xz = patch.position - halfSize;
    boundsMax.xz = patch.position + halfSize;
    boundsMin.y = patch.minMaxHeight.x;
    boundsMax.y = patch.minMaxHeight.y;
    bounds.minPosition = boundsMin;
    bounds.maxPosition = boundsMax;
    return bounds;
}

//测试是否在平面的外侧
//plane法向量指向零点  距离是负数
bool IsOutSidePlane(float4 plane, float3 position)
{
    return dot(plane.xyz, position) + plane.w < 0;
}

bool IsAABBOutSidePlane(float4 plane, float3 boundsMin, float3 boundsMax)
{
    return IsOutSidePlane(plane, boundsMin) &&
        IsOutSidePlane(plane, boundsMax) &&
        IsOutSidePlane(plane, float3(boundsMin.x, boundsMin.y, boundsMax.z)) &&
        IsOutSidePlane(plane, float3(boundsMin.x, boundsMax.y, boundsMin.z)) &&
        IsOutSidePlane(plane, float3(boundsMin.x, boundsMax.y, boundsMax.z)) &&
        IsOutSidePlane(plane, float3(boundsMax.x, boundsMin.y, boundsMax.z)) &&
        IsOutSidePlane(plane, float3(boundsMax.x, boundsMax.y, boundsMin.z)) &&
        IsOutSidePlane(plane, float3(boundsMax.x, boundsMin.y, boundsMin.z));
}

bool IsBoundsOutSidePlane(float4 plane, Bounds bounds)
{
    return IsAABBOutSidePlane(plane, bounds.minPosition, bounds.maxPosition);
}

//视锥裁剪
bool FrustumCull(float4 planes[6], Bounds bounds)
{
    return IsBoundsOutSidePlane(planes[0], bounds) ||
        IsBoundsOutSidePlane(planes[1], bounds) ||
        IsBoundsOutSidePlane(planes[2], bounds) ||
        IsBoundsOutSidePlane(planes[3], bounds) ||
        IsBoundsOutSidePlane(planes[4], bounds) ||
        IsBoundsOutSidePlane(planes[5], bounds);
}

bool Cull(Bounds bounds)
{
    #if ENABLE_FRUS_CULL
    if(FrustumCull(_CameraFrustumPlanes,bounds))
    {
        return true;
    }
    #endif
    #if ENABLE_HIZ_CULL
    if(HizOcclusionCull(bounds))
    {
        return true;
    }
    #endif
    return false;
}

//https://blog.csdn.net/a359877454/article/details/80275157
//group>groupThread>dispatchThread
//这里写8*8 是因为细分为8个小的node
[numthreads(8,8,1)]
void BuildPatches(uint3 id : SV_DispatchThreadID, uint3 groupID:SV_GroupID, uint3 groupThreadID:SV_GroupThreadID)
{
    uint3 nodeLoc = _FinalNodeList[groupID.x];
    uint2 patchOffset = groupThreadID.xy;
    //生成Patch
    RenderPatch patch = CreatePatch(nodeLoc, patchOffset);

    //裁剪
    Bounds bounds = GetPatchBounds(patch);
    if (Cull(bounds))
    {
        return;
    }
    SetLodTrans(patch, nodeLoc, patchOffset);
    CulledPatchList.Append(patch);
    #if BOUNDS_DEBUG
    BoundsDebug boundsDebug;
    boundsDebug.bounds = bounds;
    boundsDebug.color = float4((bounds.minPosition + _WorldSize * 0.5) / _WorldSize,1);
    PatchBoundsList.Append(boundsDebug);
    #endif
}
